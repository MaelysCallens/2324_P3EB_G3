<?php

/**
 * @file
 * Allows to set the fields widgets and formatters as collapsible.
 */

use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Field\WidgetInterface;
use Drupal\Core\Field\FormatterInterface;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_help().
 */
function collapsible_fields_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.collapsible_fields':
      $output = '<p>' . t('Allows to set the fields widgets and formatters as collapsible.') . '</p>';
      $output .= '<p>' . t('Using the form display page and the manage display pages you will find the new options in all field to make them collapsible.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_field_widget_third_party_settings_form().
 */
function collapsible_fields_field_widget_third_party_settings_form(WidgetInterface $plugin, FieldDefinitionInterface $field_definition, $form_mode, $form, FormStateInterface $form_state) {
  /** @var \Drupal\collapsible_fields\SettingsManager $settings_manager */
  $settings_manager = \Drupal::service('collapsible_fields.settings_manager');
  return $settings_manager->getSettingsFromElement($plugin);
}

/**
 * Implements hook_field_widget_settings_summary_alter().
 */
function collapsible_fields_field_widget_settings_summary_alter(&$summary, $context) {
  /** @var \Drupal\collapsible_fields\SettingsManager $settings_manager */
  $settings_manager = \Drupal::service('collapsible_fields.settings_manager');
  $settings_manager->getSettingsFromSummary($summary, $context);
}

/**
 * Implements hook_field_formatter_third_party_settings_form().
 */
function collapsible_fields_field_formatter_third_party_settings_form(FormatterInterface $plugin, FieldDefinitionInterface $field_definition, $view_mode, $form, FormStateInterface $form_state) {
  /** @var \Drupal\collapsible_fields\SettingsManager $settings_manager */
  $settings_manager = \Drupal::service('collapsible_fields.settings_manager');
  return $settings_manager->getSettingsFromElement($plugin);
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function collapsible_fields_field_formatter_settings_summary_alter(&$summary, $context) {
  /** @var \Drupal\collapsible_fields\SettingsManager $settings_manager */
  $settings_manager = \Drupal::service('collapsible_fields.settings_manager');
  $settings_manager->getSettingsFromSummary($summary, $context);
}

/**
 * Implements hook_field_widget_form_alter().
 */
function collapsible_fields_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  $thirdPartySettings = $context['widget']->getThirdPartySettings();
  if (!empty($thirdPartySettings['collapsible_fields']['collapsible_fields_enabled'])) {
    $element['#collapsible_field'] = TRUE;
    $element['#title_display'] = 'invisible';
  }
  if (!empty($thirdPartySettings['collapsible_fields']['collapsible_fields_open'])) {
    $element['#collapsible_field_open'] = TRUE;
  }
  // Date fields.
  if (isset($element['value']['#type']) && $element['value']['#type'] == 'datetime') {
    if (!empty($thirdPartySettings['collapsible_fields']['collapsible_fields_enabled'])) {
      $element['value']['#collapsible_field'] = TRUE;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function collapsible_fields_theme_suggestions_container_alter(array &$suggestions, array $variables, $hook) {
  // Skipping if element doesn't have widget.
  if (!isset($variables['element']['widget'])) {
    return;
  }
  if (isset($variables['element']['widget']['#collapsible_field']) || isset($variables['element']['widget'][0]['#collapsible_field'])) {
    $suggestions[] = $hook . '__collapsible';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function collapsible_fields_theme_suggestions_field_alter(array &$suggestions, array $variables, $hook) {
  if (!empty($variables['element']['#third_party_settings']['collapsible_fields']['collapsible_fields_enabled'])) {
    $suggestions[] = $hook . '__collapsible';
  }
}

/**
 * Implements hook_theme().
 *
 * Loading template from the module.
 */
function collapsible_fields_theme($existing, $type, $theme, $path) {
  $templates = $path . '/templates';
  return [
    'container__collapsible' => [
      'template' => 'container--collapsible',
      'path' => $templates,
    ],
    'field__collapsible' => [
      'template' => 'field--collapsible',
      'path' => $templates,
    ],
  ];
}

/**
 * Implements hook_preprocess_container__collapsible().
 */
function collapsible_fields_preprocess_container__collapsible(&$variables) {
  // Recovering variables processing from original container preprocess.
  template_preprocess_container($variables);
  // Details classes based on the admin theme.
  $config = \Drupal::service('config.factory');
  $admin_theme = $config->get('system.theme')->get('admin');
  $variables['details_attributes'] = new Attribute();
  $variables['summary_attributes'] = new Attribute();
  if ($admin_theme == 'adminimal_theme' || $admin_theme == 'seven') {
    $variables['details_attributes']->addClass('seven-details');
    $variables['summary_attributes']->addClass('seven-details__summary');
    $variables['attributes']['class'][] = 'seven-details__wrapper';
  }
  // Adding required class.
  if ($variables['element']['widget']['#required']) {
    $variables['summary_attributes']->addClass('form-required');
  }
  // Setting open attribute.
  if (isset($variables['element']['widget']['#collapsible_field_open']) || isset($variables['element']['widget'][0]['#collapsible_field_open']) || $variables['element']['widget']['#errors']) {
    $variables['details_attributes']->setAttribute('open', 'open');
  }
}

/**
 * Implements hook_preprocess_field__collapsible().
 */
function collapsible_fields_preprocess_field__collapsible(&$variables) {
  // Recovering variables processing from original field preprocess.
  template_preprocess_field($variables, 'preprocess_field');
  // Setting open attribute.
  if (isset($variables['element']['#third_party_settings']['collapsible_fields']['collapsible_fields_open']) && $variables['element']['#third_party_settings']['collapsible_fields']['collapsible_fields_open']) {
    $variables['attributes']['open'] = 'open';
  }
}

/**
 * Implements hook_preprocess_datetime_wrapper().
 *
 * Removing label for date fields.
 */
function collapsible_fields_preprocess_datetime_wrapper(&$variables) {
  if (isset($variables['element']['#collapsible_field'])) {
    $variables['title_attributes']['class'][] = 'visually-hidden';
  }
}
